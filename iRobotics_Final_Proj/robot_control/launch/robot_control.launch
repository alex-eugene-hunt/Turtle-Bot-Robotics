<!-- Alex Hunt, Averi Bates, Aminat Oyeleke -->
<!-- CS-4023-001 : Professor Hougen -->
<!-- Project 2 - Reactive Robotics using ROS and TurtleBots -->
<!-- robot_control.launch - our launch file that incorperates needed starting files -->
<!-- We included code from minimal.launch to bring up the turtlebot --> 

<launch>
    <!-- Arguments -->
    <arg name="base"      value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
    <arg name="battery"   value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
    <arg name="gui" default="true"/>
    <arg name="stacks"    value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
    <arg name="3d_sensor" value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
    <arg name="camera"    value="$(optenv TURTLEBOT_RGB_SENSOR kinect)"/>
    <arg name="simulation"        default="$(env TURTLEBOT_SIMULATION)"   doc="set flags to indicate this turtle is run in simulation mode."/>
    <arg name="serialport"        default="$(env TURTLEBOT_SERIAL_PORT)"  doc="used by create to configure the port it is connected on [/dev/ttyUSB0, /dev/ttyS0]"/>

    <param name="/use_sim_time" value="$(arg simulation)"/>

    <!-- TurtleBot Bringup -->
    <include file="$(find turtlebot_bringup)/launch/includes/robot.launch.xml">
      <arg name="base" value="$(arg base)" />
      <arg name="stacks" value="$(arg stacks)" />
      <arg name="3d_sensor" value="$(arg 3d_sensor)" />
    </include>
    <include file="$(find turtlebot_bringup)/launch/includes/mobile_base.launch.xml">
      <arg name="base" value="$(arg base)" />
      <arg name="serialport" value="$(arg serialport)" />
    </include>
    <include unless="$(eval arg('battery') == 'None')" file="$(find turtlebot_bringup)/launch/includes/netbook.launch.xml">
      <arg name="battery" value="$(arg battery)" />
    </include>

    <group ns="namespace1">
        <!-- OpenNI2 Camera Launch -->
        <include file="$(find openni2_launch)/launch/openni2.launch">
            <arg name="camera" value="$(arg camera)" />
        </include>
    </group>

    <!-- TF2 Publisher -->
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher2">
        <param name="publish_frequency" type="double" value="30.0" />
    </node>

    <!-- Fake Laser from Depth Image -->
    <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
    <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
          args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
        <param name="scan_height" value="10"/>
        <param name="output_frame_id" value="/camera_depth_frame"/>
        <param name="range_min" value="0.1"/>
        <remap from="image" to="/camera/depth/image_raw"/>
        <remap from="scan" to="/scan"/>
    </node>

    <!-- Robot Control Node -->
    <node pkg="robot_control" name="control_node" type="control_node.py" output="screen"/>

    <!--Color Detection Node-->
    <node pkg="robot_control" name="color_detection_updated_node" type="color_detection_updated.py" output="screen"/>
   
    <!-- Teleoperation Node -->
    <node pkg="robot_control" name="teleop_node" type="teleop_node.py" output="screen"/>
</launch>

